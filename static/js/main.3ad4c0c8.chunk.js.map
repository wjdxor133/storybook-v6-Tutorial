{"version":3,"sources":["lib/redux.js","components/Button/Button.styles.js","components/Button/Button.js","App.js","index.js"],"names":["actions","taskStateReducer","taskState","state","action","tasks","map","task","id","createStore","type","title","types","largeFill","css","color","colors","regularFill","regularLine","smallLine","smallText","blue","gray","coral","ButtonStyle","styled","button","Button","props","children","loading","rest","size","App","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAKaA,EACG,eADHA,EAED,WAQZ,SAASC,EAAiBC,GACxB,OAAO,SAACC,EAAOC,GACb,OAAO,2BACFD,GADL,IAEEE,MAAOF,EAAME,MAAMC,KAAI,SAACC,GAAD,OACrBA,EAAKC,KAAOJ,EAAOI,GAAnB,2BAA6BD,GAA7B,IAAmCJ,MAAOD,IAAcK,QAOzD,I,YAqBQE,eArBQ,SAACN,EAAOC,GAC7B,OAAQA,EAAOM,MACb,KAAKV,EACH,OAAOC,EAAiB,gBAAjBA,CAAkCE,EAAOC,GAClD,KAAKJ,EACH,OAAOC,EAAiB,cAAjBA,CAAgCE,EAAOC,GAChD,QACE,OAAOD,KAcuB,CAAEE,MARjB,CACnB,CAAEG,GAAI,IAAKG,MAAO,YAAaR,MAAO,cACtC,CAAEK,GAAI,IAAKG,MAAO,iBAAkBR,MAAO,cAC3C,CAAEK,GAAI,IAAKG,MAAO,iBAAkBR,MAAO,cAC3C,CAAEK,GAAI,IAAKG,MAAO,kBAAmBR,MAAO,iB,sBC1CxCS,EAAQ,CACZC,UAAWC,YAAF,sIAKa,gBAAGC,EAAH,EAAGA,MAAH,OAAeC,EAAOD,MAG5CE,YAAaH,YAAF,sIAKW,gBAAGC,EAAH,EAAGA,MAAH,OAAeC,EAAOD,MAG5CG,YAAaJ,YAAF,mJAIA,gBAAGC,EAAH,EAAGA,MAAH,OAAeC,EAAOD,MAIjCI,UAAWL,YAAF,kJAIE,gBAAGC,EAAH,EAAGA,MAAH,OAAeC,EAAOD,MAIjCK,UAAWN,YAAF,uIAIE,gBAAGC,EAAH,EAAGA,MAAH,OAAeC,EAAOD,OAKtBC,EAAS,CACpBK,KAAM,UACNC,KAAM,UACNC,MAAO,WAGIC,EAAcC,IAAOC,OAAV,8GACpB,gBAAGhB,EAAH,EAAGA,KAAH,OAAcE,EAAMF,M,wBC1BTiB,MAnBf,SAAgBC,GACd,IAAQC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,QAASpB,EAAkBkB,EAAlBlB,KAASqB,EAApC,YAA6CH,EAA7C,+BACA,OACE,8BACE,cAACJ,EAAD,yBAAad,KAAMA,GAAUqB,GAA7B,aACGD,EACC,cAAC,IAAD,CACEf,MAAgB,gBAATL,EAAyB,UAAY,OAC5CoB,QAASA,EACTE,KAAM,KAGRH,QCJKI,MAPf,WACE,OACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,OCLNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3ad4c0c8.chunk.js","sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from \"redux\";\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n  ARCHIVE_TASK: \"ARCHIVE_TASK\",\n  PIN_TASK: \"PIN_TASK\",\n};\n\n// The action creators bundle actions with the data required to execute them\nexport const archiveTask = (id) => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = (id) => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n  return (state, action) => {\n    return {\n      ...state,\n      tasks: state.tasks.map((task) =>\n        task.id === action.id ? { ...task, state: taskState } : task\n      ),\n    };\n  };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer(\"TASK_ARCHIVED\")(state, action);\n    case actions.PIN_TASK:\n      return taskStateReducer(\"TASK_PINNED\")(state, action);\n    default:\n      return state;\n  }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: \"1\", title: \"Something\", state: \"TASK_INBOX\" },\n  { id: \"2\", title: \"Something more\", state: \"TASK_INBOX\" },\n  { id: \"3\", title: \"Something else\", state: \"TASK_INBOX\" },\n  { id: \"4\", title: \"Something again\", state: \"TASK_INBOX\" },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });\n","import styled, { css } from \"styled-components\";\n\nconst types = {\n  largeFill: css`\n    width: 375px;\n    height: 64px;\n    border: none;\n    color: white;\n    background-color: ${({ color }) => colors[color]};\n  `,\n\n  regularFill: css`\n    width: 327px;\n    height: 54px;\n    border: none;\n    color: white;\n    background-color: ${({ color }) => colors[color]};\n  `,\n\n  regularLine: css`\n    width: 327px;\n    height: 54px;\n    border: 1px solid #e9ebee;\n    color: ${({ color }) => colors[color]};\n    background-color: white;\n  `,\n\n  smallLine: css`\n    width: 41px;\n    height: 32px;\n    border: 1px solid #e9ebee;\n    color: ${({ color }) => colors[color]};\n    background-color: white;\n  `,\n\n  smallText: css`\n    width: 41px;\n    height: 32px;\n    border: none;\n    color: ${({ color }) => colors[color]};\n    background-color: inherit;\n  `,\n};\n\nexport const colors = {\n  blue: \"#00B8FF\",\n  gray: \"#28323C\",\n  coral: \"#FF6F61\",\n};\n\nexport const ButtonStyle = styled.button`\n  ${({ type }) => types[type]}\n\n  :disabled {\n    background-color: #e9ebee;\n    color: #c5c8ce;\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ButtonStyle } from \"./Button.styles\";\nimport SyncLoader from \"react-spinners/SyncLoader\";\n\n/** `Button` 컴포넌트는 어떠한 작업을 트리거 할 때 사용합니다.  */\nfunction Button(props) {\n  const { children, loading, type, ...rest } = props;\n  return (\n    <div>\n      <ButtonStyle type={type} {...rest}>\n        {loading ? (\n          <SyncLoader\n            color={type === \"regularLine\" ? \"#C5C8CE\" : \"#fff\"}\n            loading={loading}\n            size={10}\n          />\n        ) : (\n          children\n        )}\n      </ButtonStyle>\n    </div>\n  );\n}\n\nexport default Button;\n\nButton.propTypes = {\n  /**\n   * 버튼 타입\n   */\n  type: PropTypes.oneOf([\n    \"largeFill\",\n    \"regularFill\",\n    \"regularLine\",\n    \"smallLine\",\n    \"smallText\",\n  ]),\n  /**\n   * 버튼 색상\n   */\n  color: PropTypes.oneOf([\"blue\", \"gray\", \"coral\"]),\n\n  /**\n   * 버튼 활성화\n   */\n  disabled: PropTypes.bool,\n  /**\n   * 버튼 로딩\n   */\n  loading: PropTypes.bool,\n  /**\n   * Optional click handler\n   */\n  // onClick: PropTypes.func,\n\n  /**\n   * 버튼 글씨\n   */\n\n  children: PropTypes.string,\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./lib/redux\";\n\nimport Button from \"./components/Button/Button\";\n\nimport \"./index.css\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Button />\n    </Provider>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}